version: '3.9'

services:

#  postgres:
#    container_name: postgres
#    image: postgres:15-alpine
#    environment:
##      POSTGRES_HOST: localhost
#      POSTGRES_DB: docker_database
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      POSTGRES_DATA: /var/lib/postgresql/data/pgdata
#    volumes:
#      - ./sql:/docker-entrypoint-initdb.d/
#      - postgres_data:/var/lib/postgresql/data/
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgres -d docker_database" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s
#    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '1'
#          memory: 4G
#    networks:
#      - postgres
#    expose:
#      - 5432

  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: Dockerfile-postgres
    environment:
      #      POSTGRES_HOST: localhost
      POSTGRES_DB: docker_database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d docker_database" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres
    expose:
      - 5432

  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./src:/opt/app
    ports:
      - 8080:8080
    environment:
      PORT: 8080
      HOST: http://localhost:8080/
    depends_on:
      - postgres

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:5.7
    environment:
      PGADMIN_DEFAULT_EMAIL: test@gmail.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
      PGADMIN_CONFIG_SERVER_MODE: False
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - 16543:80
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres
    depends_on:
      - postgres

  postgres_exporter:
    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter:v0.10.0
    environment:
      DATA_SOURCE_URI: postgres:5432/docker_database?sslmode=disable
      DATA_SOURCE_USER: postgres
      DATA_SOURCE_PASS: root
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yaml
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - 9187:9187
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    networks:
      - postgres
    depends_on:
      - postgres

volumes:
  postgres_data:

networks:
  postgres:
    driver: bridge

#################################################INFO###################################################################

# После этого в консоли выполним вот эту команду:
#  docker-compose up --build -d

# Тут мы говорим: up – поднять, --build – собрать, -d – пусть робит в фоне.
# После чего мы можем посмотреть список запущенных сервисов:
#  docker-compose ps
#  docker-compose ps -a - вывести список всех контейнеров
#  docker-compose ps -q - выводит только ID контейнеров
#  docker ps - отображает в терминале все запущенные контейнеры
#  docker ps -a - все контейнеры, созданные в системе

# docker image history anti-app - оказывает каждый слой образа в ретроспективе, отображая ряд полезных сведений
# docker image inspect anti-app - рассказывает все, что известно об образе, включая данные, касающиеся отдельных слоев

# docker stop имя/id контейнера - остановить контейнер
# docker restart имя/id контейнера - перезагрузить

# docker rm имя/id контейнера - удаление контейнера
# docker rm $(docker ps -qa) - удалить все контейнеры

# docker system prune - удалить все не связанные с контейнерами ресурсы (образы, контейнеры, тома и сети)
# docker system prune -a - удалить все остановленные контейнеры и неиспользуемые образы

# docker volume ls - просмотреть существующие тома

#  Создать образ — docker build -t название образа и путь до проекта. Например, команда docker build -t my_cont_app . соберёт образ под название my_cont_app из текущей директории (“.”).
#  Просмотреть список локальных образов — docker images.
#  Удалить образ — docker image rm -f название образа.
#  Удалить все образы — docker rmi $(docker images -q).
#  Поиск образа в удалённом репозитории — docker search имя образа.
#  Скачать образ из удалённого репозитория — docker pull имя образа.
#  Загрузить образ в личный удаленный репозиторий на Docker hub — docker push название образа (можно начать вводить название и нажать tab).

# Для загрузки образа на Docker hub — нужно выполнить следующие действия:
# Собрать образ командой docker build -t и в качестве имени указать: логин Docker hub / название образа. Например: docker build -t pseudolukian/acc-info.
# Авторизоваться через консоль: docker login. Команда попросит ввести логин и пароль. После успешной авторизации можно переходить к загрузке образа.
# Загрузить образ командой docker push имя образа. Например: docker push pseudolukian/acc-info.

# docker run:
# -t — предоставляет доступ к терминалу внутри контейнера.
# -i — делает возможным взаимодействие с терминалом внутри контейнера.
# -d — запуск контейнер в фоновом режиме. Это позволяет использовать терминал, из которого запущен контейнер, для выполнения других команд во время работы контейнера.
# --rm — автоматическое удаление контейнера после завершения его работы.

# Важно: Все команды docker-compose должны выполняться в той же директории,
# где расположен файл docker-compose.yml. В противном случае необходимо его указывать
# явно через флаг -f и путь до файла docker-compose.yml.

# К слову у вас может быть несколько файлов docker-compose.yml и их можно включать все например вот такой конструкцией:
#  docker-compose -f docker-compose.yml -f docker-compose.admin.yml run -it backup_db

# Кейс: в файле docker-compose.admin.yml может быть больше доступа.
# Или для среды разработки можно поднимать моки вместо реальных сервисов.

# Так же замечу, что все сервисы описанные в рамках одного docker-compose.yml файла
# (в нашем примере это сервисы db и app), будут сразу “из коробки” видеть друг друга по указанным именам.

# Ну а теперь откройте в браузере http://127.0.0.1:8000/swagger/ и убедитесь, что приложение поднялось и заработало
# – откроется Swagger-документация по API нашего приложения. По крайней мере так может казаться на первый взгляд.